{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"paylo",
				"payload"
			],
			[
				"pa",
				"payloadSize"
			],
			[
				"payloa",
				"payloadHash"
			],
			[
				"payload",
				"payloadSize"
			],
			[
				"size",
				"sizeof"
			],
			[
				"md",
				"md5.h\t(md5.h)"
			],
			[
				"mbedtls_md5_",
				"mbedtls_md5_init\t(md5.c)"
			],
			[
				"wif",
				"wifi_event_group"
			],
			[
				"connect",
				"connect_to_server"
			],
			[
				"SE",
				"SERVER_ADDR"
			],
			[
				"EXA",
				"EXAMPLE_ESP_WIFI_PASS"
			],
			[
				"E",
				"EXAMPLE_ESP_WIFI_SSID"
			],
			[
				"wifin",
				"wifi_config"
			],
			[
				"wifi",
				"wifi_config"
			],
			[
				"st",
				"strcpy"
			],
			[
				"wr",
				"writeByte"
			],
			[
				"en",
				"endl"
			],
			[
				"sin",
				"sin_port"
			],
			[
				"serve",
				"serverAddress"
			],
			[
				"ret",
				"return"
			],
			[
				"sock",
				"sockaddr"
			],
			[
				"ESP_",
				"ESP_ERROR_CHECK"
			],
			[
				"WIFI",
				"WIFI_PASS"
			],
			[
				"WI",
				"WIFI_PASS"
			],
			[
				"cout",
				"cout_mutex"
			],
			[
				"vecto",
				"vector\tstandard header"
			],
			[
				"sel",
				"selects"
			],
			[
				"getELe",
				"getElementsByClassName\t( classNames: DOMString ): HTMLCollection Element"
			],
			[
				"getElem",
				"getElementsByClassName\t( classNames: DOMString ): HTMLCollection Element"
			],
			[
				"fun",
				"function"
			],
			[
				"SSI",
				"SSIDLen"
			],
			[
				"addr",
				"addr1"
			],
			[
				"str",
				"str1"
			],
			[
				"num",
				"number"
			],
			[
				"set",
				"setw"
			],
			[
				"se",
				"setw"
			],
			[
				"Chan",
				"CHAN"
			],
			[
				"in",
				"include"
			],
			[
				"add",
				"addr1"
			],
			[
				"de",
				"destAddress"
			],
			[
				"SSD",
				"SSIDLen"
			],
			[
				"re",
				"return"
			],
			[
				"wi",
				"wifi_promiscuous_pkt_type_t"
			],
			[
				"ssi",
				"ssid"
			],
			[
				"u",
				"uint8_t"
			],
			[
				"sub",
				"subtype"
			],
			[
				"subt",
				"subtype"
			],
			[
				"tag",
				"tag_len"
			],
			[
				"ta",
				"tag_number"
			],
			[
				"ssid",
				"ssid_prmtr"
			],
			[
				"us",
				"unsigned"
			],
			[
				"h",
				"hdr"
			],
			[
				"def",
				"default"
			],
			[
				"wifi_sni",
				"wifi_sniffer_packet_type2str"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "#include \"freertos/FreeRTOS.h\"\n#include \"esp_wifi.h\"\n#include \"esp_wifi_types.h\"\n#include \"esp_system.h\"\n#include \"esp_event.h\"\n#include \"esp_event_loop.h\"\n#include \"nvs_flash.h\"\n#include \"driver/gpio.h\"\n#include <esp_log.h>\n#include \"freertos/task.h\"\n#include \"sdkconfig.h\"\n#include <string>\n#include <string.h>\n#include <map>\n#include <memory>\n#include <stdio.h>\n#include \"memory\"\n#include <iostream>\n#include <iomanip>\n#include \"mbedtls/md5.h\"\n#include \"80211Packet.h\"\n#include \"ProbeReq.h\"\n\n#define\tLED_GPIO_PIN\t\t\tGPIO_NUM_4\n#define\tWIFI_CHANNEL_MAX\t\t(13)\n#define\tWIFI_CHANNEL_SWITCH_INTERVAL\t(500)\n#define MAX_BLOCKS 36\n\nusing namespace std;\n\nstatic wifi_country_t wifi_country = {.cc=\"CN\", .schan=1, .nchan=13, .policy=WIFI_COUNTRY_POLICY_AUTO};\n\nextern \"C\" {\n\tvoid app_main(void);\n}\n\nstatic esp_err_t event_handler(void *ctx, system_event_t *event);\nstatic void wifi_sniffer_init(void);\nstatic void wifi_sniffer_set_channel(uint8_t channel);\nstatic void wifi_sniffer_packet_handler(void *buff, wifi_promiscuous_pkt_type_t type);\n\nvoid app_main(void) {\n\tuint8_t level = 0, channel = 1;\n\n\t/* setup */\n\twifi_sniffer_init();\n\tgpio_set_direction(LED_GPIO_PIN, GPIO_MODE_OUTPUT);\n\n\tESP_LOGD(\"prova\", \"Hello mondo2\");\n\tESP_LOGD(\"sizeof\", \"%u\", sizeof(wifi_ieee80211_mac_hdr_t));\n\t\n\t/* loop */\n\twhile (true) {\n\t\t// gpio_set_level(LED_GPIO_PIN, level ^= 1);\n\t\t// vTaskDelay(WIFI_CHANNEL_SWITCH_INTERVAL / portTICK_PERIOD_MS);\n\t\t// wifi_sniffer_set_channel(channel);\n\t\t// channel = (channel % WIFI_CHANNEL_MAX) + 1;\n        wifi_sniffer_set_channel(10);    \n        vTaskDelay(50000 / portTICK_PERIOD_MS);\n    }\n}\n\nesp_err_t\nevent_handler(void *ctx, system_event_t *event)\n{\n\n\treturn ESP_OK;\n}\n\nvoid\nwifi_sniffer_init(void)\n{\n\n\tnvs_flash_init();\n    tcpip_adapter_init();\n    ESP_ERROR_CHECK( esp_event_loop_init(event_handler, NULL) );\n    wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();\n\tESP_ERROR_CHECK( esp_wifi_init(&cfg) );\n\tESP_ERROR_CHECK( esp_wifi_set_country(&wifi_country) ); /* set country for channel range [1, 13] */\n\tESP_ERROR_CHECK( esp_wifi_set_storage(WIFI_STORAGE_RAM) );\n    ESP_ERROR_CHECK( esp_wifi_set_mode(WIFI_MODE_STA) );\n    ESP_ERROR_CHECK( esp_wifi_start() );\n\tesp_wifi_set_promiscuous(true);\n\tesp_wifi_set_promiscuous_rx_cb(&wifi_sniffer_packet_handler);\n}\n\nvoid\nwifi_sniffer_set_channel(uint8_t channel)\n{\n\tESP_ERROR_CHECK(esp_wifi_set_channel(channel, WIFI_SECOND_CHAN_NONE));\n}\n\nvoid\nwifi_sniffer_packet_handler(void* buff, wifi_promiscuous_pkt_type_t type)\n{\n    if (type != WIFI_PKT_MGMT) {\n\t\treturn;\n\t}\n\n\tchar buf[32 + 1];\n\tuint8_t subtype;\n\tint8_t rssi;\n\tuint8_t channel;\n\tuint8_t ssidLen; \n\tstring ssid;\n\tarray<uint8_t,6> sAddr;\n\tarray<uint8_t,6> dAddr;\n\tarray<uint8_t,6> bssid;\n    unsigned char md5sum[16];\n    unsigned char md5sum2[16];\n\n\tconst wifi_promiscuous_pkt_t *ppkt = (wifi_promiscuous_pkt_t *)buff;\n\tconst wifi_ieee80211_packet_t *ipkt = (wifi_ieee80211_packet_t *)ppkt->payload;\n    int payloadSize = ppkt->rx_ctrl.sig_len - 4;\n    uint8_t *payloadHash = new uint8_t[payloadSize];\n    bzero(payloadHash, payloadSize);\n    memcpy(payloadHash, ppkt->payload, payloadSize);\n\tconst wifi_ieee80211_mac_hdr_t *hdr = &ipkt->hdr;\n\n\t/* filter only PROBE REQ packets */\n    //Todo filter if equal 0x04\n\tsubtype = hdr->frame_ctrl;\n\tsubtype = subtype & 0xF0;\n    if (subtype != 0x40) {\n\t\t\treturn;\n\t}\n\n\tssidLen = ipkt->ssid_prmtr.tag_len;\n    memcpy(buf, ipkt->ssid_prmtr.ssid, ssidLen);\n    buf[ssidLen] = '\\0';\n\tssid = buf;\n\trssi = ppkt->rx_ctrl.rssi;\n    // take channel byte and filter useful bits\n    // ToDo test if channel is correct\n    channel = ppkt->rx_ctrl.channel;\n\tchannel &= 0xF0;\n\t// try after sntp configuration\n    // cout << ppkt->rx_ctrl.timestamp << endl;\n    \n    // i don't know why but last 4 bytes (of FCS i think) are different for any ESP receiver\n    // mbedtls_md5((const unsigned char *) ppkt->payload, ppkt->rx_ctrl.sig_len, md5sum);\n    mbedtls_md5((const unsigned char *) payloadHash, payloadSize, md5sum2);\n\n    //debug\n    // for (int i = 0; i < payloadSize; i++) {\n    //         cout << setfill('0') << setw(2) << hex << static_cast<unsigned int>(payloadHash[i])<< \":\";\n    //         if (i %15 == 0) {\n    //             cout << endl;\n    //         }\n\n    // }\n    \n    cout << dec << \"packet len: \" << ppkt->rx_ctrl.sig_len << \", \" << payloadSize-1 << \" seq num: \" <<\n            dec << hdr->sequence_number; //<< \" hash1: \";\n    // for (int i = 0; i < 16; i++) {\n        // cout << setfill('0') << setw(2) << hex << static_cast<unsigned int>(md5sum[i]);\n    // }\n    cout << \" \" <<\" hash \";\n    for (int i = 0; i < 16; i++) {\n        cout << setfill('0') << setw(2) << hex << static_cast<unsigned int>(md5sum2[i]);\n    }\n\n    cout << endl;\n\n\n\tcopy(begin(hdr->addr1), end(hdr->addr1), begin(sAddr));\n\tcopy(begin(hdr->addr2), end(hdr->addr2), begin(dAddr));\n\tcopy(begin(hdr->addr3), end(hdr->addr3), begin(bssid));\n\t\n\tProbeReq probe(type, subtype, ppkt->rx_ctrl.channel,\n\t\trssi, ssid, ssidLen, sAddr, dAddr, bssid);\n\n\tcout << probe;\n}\n",
			"file": "main/main.cpp",
			"file_size": 5014,
			"file_write_time": 131848636623112967,
			"settings":
			{
				"buffer_size": 5014,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "[\n\t{ \"button\": \"button1\", \"modifiers\": [\"super\"], \"command\": \"goto_python_definition\", \"press_command\": \"drag_select\" }\n]\n",
			"file": "/home/michele/.config/sublime-text-3/Packages/SublimeCodeIntel/Default (Linux).sublime-mousemap",
			"file_size": 121,
			"file_write_time": 131848641450340727,
			"settings":
			{
				"buffer_size": 122,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/michele/.config/sublime-text-3/Packages/SublimeCodeIntel/Default (Linux).sublime-keymap",
			"settings":
			{
				"buffer_size": 225,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 8352 files for \"WIFI_MODE_NULL\"\n\n/home/michele/eclipse-workspace/PdsProject/build/app-template.elf:\n    <binary>\n\n/home/michele/eclipse-workspace/PdsProject/build/pds-project.bin:\n    <binary>\n\n/home/michele/eclipse-workspace/PdsProject/build/pds-project.elf:\n    <binary>\n\n/home/michele/eclipse-workspace/PdsProject/main/main.cpp:\n   79  \tESP_ERROR_CHECK( esp_wifi_set_country(&wifi_country) ); /* set country for channel range [1, 13] */\n   80  \tESP_ERROR_CHECK( esp_wifi_set_storage(WIFI_STORAGE_RAM) );\n   81:     ESP_ERROR_CHECK( esp_wifi_set_mode(WIFI_MODE_NULL) );\n   82      ESP_ERROR_CHECK( esp_wifi_start() );\n   83  \tesp_wifi_set_promiscuous(true);\n\n/home/michele/esp/esp-idf/components/esp32/include/esp_wifi_types.h:\n   28  \n   29  typedef enum {\n   30:     WIFI_MODE_NULL = 0,  /**< null mode */\n   31      WIFI_MODE_STA,       /**< WiFi station mode */\n   32      WIFI_MODE_AP,        /**< WiFi soft-AP mode */\n\n/home/michele/esp/esp-idf/components/esptool_py/esptool/test/elf2image/esp32-app-template.elf:\n    <binary>\n\n/home/michele/esp/esp-idf/components/mdns/test_afl_fuzz_host/esp32_compat.h:\n   81  \n   82  typedef enum {\n   83:     WIFI_MODE_NULL = 0,  /**< null mode */\n   84      WIFI_MODE_STA,       /**< WiFi station mode */\n   85      WIFI_MODE_AP,        /**< WiFi soft-AP mode */\n\n/home/michele/esp/esp-idf/docs/en/api-guides/wifi.rst:\n 1027  | Mode             | Description                                                  |\n 1028  +==================+==============================================================+\n 1029: | WIFI_MODE_NULL   | NULL mode: in this mode, the internal data struct is not     |\n 1030  |                  | allocated to the station and the soft-AP, while both the     |\n 1031  |                  | station and soft-AP interfaces are not initialized for       |\n ....\n 1453  For frames that the sniffer **can** dump, the application can additionally decide which specific type of packets can be filtered to the application by using esp_wifi_set_promiscuous_filter(). By default, it will filter all 802.11 data and management frames to the application.\n 1454  \n 1455: The Wi-Fi sniffer mode can be enabled in the Wi-Fi mode of WIFI_MODE_NULL, or WIFI_MODE_STA, or WIFI_MODE_AP, or WIFI_MODE_APSTA. In other words, the sniffer mode is active when the station is connected to the soft-AP, or when the soft-AP has a Wi-Fi connection. Please note that the sniffer has a **great impact** on the throughput of the station or soft-AP Wi-Fi connection. Generally, we should **NOT** enable the sniffer, when the station/soft-AP Wi-Fi connection experiences heavy traffic unless we have special reasons.\n 1456  \n 1457  Another noteworthy issue about the sniffer is the callback wifi_promiscuous_cb_t. The callback will be called directly in the Wi-Fi driver task, so if the application has a lot of work to do for each filtered packet, the recommendation is to post an event to the application task in the callback and defer the real work to the application task.\n\n/home/michele/esp/esp-idf/examples/system/console/main/cmd_wifi.c:\n   52      ESP_ERROR_CHECK( esp_wifi_init(&cfg) );\n   53      ESP_ERROR_CHECK( esp_wifi_set_storage(WIFI_STORAGE_RAM) );\n   54:     ESP_ERROR_CHECK( esp_wifi_set_mode(WIFI_MODE_NULL) );\n   55      ESP_ERROR_CHECK( esp_wifi_start() );\n   56      initialized = true;\n\n/home/michele/esp/esp-idf/examples/wifi/iperf/main/cmd_wifi.c:\n   85      ESP_ERROR_CHECK( esp_wifi_init(&cfg) );\n   86      ESP_ERROR_CHECK( esp_wifi_set_storage(WIFI_STORAGE_RAM) );\n   87:     ESP_ERROR_CHECK( esp_wifi_set_mode(WIFI_MODE_NULL) );\n   88      ESP_ERROR_CHECK( esp_wifi_start() );\n   89      initialized = true;\n\n/home/michele/esp/esp-idf/examples/wifi/scan/build/scan.elf:\n    <binary>\n\n/home/michele/esp/esp-idf/examples/wifi/simple_wifi/build/simple_wifi.elf:\n    <binary>\n\n14 matches across 12 files\n",
			"settings":
			{
				"buffer_size": 3875,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "/home/michele/esp/esp-idf/components/esp32/include/esp_wifi_types.h",
			"settings":
			{
				"buffer_size": 17137,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				"Run"
			]
		],
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/User/C_pthread.sublime-build",
					""
				],
				[
					"Packages/User/C_pthread.sublime-build",
					"Run"
				]
			],
			[
				"Packages/User/C_pthread.sublime-build",
				"Run"
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Package Control: Add Channel"
			],
			[
				"rein",
				"Indentation: Reindent Lines"
			],
			[
				"re",
				"Package Control: Remove Package"
			],
			[
				"stop",
				"Xdebug: Stop Debugging (Close Windows)"
			],
			[
				"star",
				"Xdebug: Start Debugging"
			],
			[
				"start",
				"Xdebug: Restart Session"
			],
			[
				"debu",
				"Xdebug: Start Debugging"
			],
			[
				"xdebu",
				"Xdebug: Start Debugging"
			],
			[
				"xde",
				"Xdebug: Stop Debugging"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"setting",
				"Preferences: Settings"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"setti",
				"Preferences: Settings"
			],
			[
				"es",
				"ESLint"
			],
			[
				"e",
				"ESLint"
			],
			[
				"theme",
				"UI: Select Color Scheme"
			],
			[
				"lint",
				"ESLint"
			],
			[
				"ocmme",
				"Toggle Comment"
			],
			[
				"come",
				"Toggle Comment"
			],
			[
				"toggl",
				"Toggle Comment"
			],
			[
				"comme",
				"Toggle Comment"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/michele/eclipse-workspace/PdsProject",
		"/home/michele/eclipse-workspace/PdsProject/main",
		"/home/michele/esp/esp-idf"
	],
	"file_history":
	[
		"/home/michele/.config/sublime-text-3/Packages/SublimeCodeIntel/SublimeCodeIntel.sublime-settings",
		"/home/michele/.config/sublime-text-3/Packages/User/SublimeCodeIntel.sublime-settings",
		"/home/michele/esp/esp-idf/components/lwip/include/lwip/lwip/inet.h",
		"/home/michele/hacktoberfest/syslog-ng/lib/value-pairs/cmdline.c",
		"/home/michele/hacktoberfest/syslog-ng/syslog-ng/main.c",
		"/home/michele/esp/esp-idf/components/esp32/include/esp_wifi_types.h",
		"/home/michele/esp/esp-idf/components/lwip/core/ipv4/ip4_addr.c",
		"/home/michele/esp/esp-idf/components/lwip/include/lwip/lwip/ip4_addr.h",
		"/home/michele/esp/esp-idf/components/lwip/include/lwip/lwip/ip_addr.h",
		"/home/michele/esp/esp-idf/components/lwip/include/lwip/lwip/sockets.h",
		"/home/michele/eclipse-workspace/PdsProject/main/main.cpp.bak",
		"/home/michele/eclipse-workspace/PdsProject/main/main.cpp",
		"/home/michele/eclipse-workspace/PdsProject/main/main.c",
		"/home/michele/simple_wifi/main/Kconfig.projbuild",
		"/home/michele/simple_wifi/main/component.mk",
		"/home/michele/CLionProjects/drive_es4/Phaser",
		"/home/michele/DP web/lab5/es2/es2.7.js",
		"/home/michele/DP web/lab5/es2/es2.4.html",
		"/home/michele/DP web/lab5/es1/es1.7.html",
		"/home/michele/DP web/lab5/es1/es1.7.js",
		"/home/michele/DP web/lab5/es2/es2.1.js",
		"/home/michele/DP web/lab5/es2/es2.1.html",
		"/home/michele/DP web/lab5/es2/es2.2.html",
		"/home/michele/DP web/lab5/es2/es2.2.js",
		"/home/michele/DP web/lab5/es1/es1.6.js",
		"/home/michele/DP web/lab5/es2/es2.3.js",
		"/home/michele/DP web/lab5/es2/es2.4.js",
		"/home/michele/DP web/lab5/es2/es2.2.",
		"/home/michele/esp/esp-idf/components/newlib/include/stdint.h",
		"/home/michele/DP web/lab5/es1/es1.6.html",
		"/home/michele/eclipse-workspace/PdsProject/sdkconfig",
		"/home/michele/DP web/lab5/es2",
		"/home/michele/esp/esp-idf/components/bt/bluedroid/bta/gatt/bta_gattc_api.c",
		"/home/michele/esp/esp-idf/components/mbedtls/library/ccm.c",
		"/home/michele/esp/xtensa-esp32-elf/lib/gcc/xtensa-esp32-elf/5.2.0/plugin/include/tsystem.h",
		"/home/michele/esp/esp-idf/components/log/include/esp_log.h",
		"/home/michele/esp/esp-idf/components/mbedtls/include/mbedtls/ccm.h",
		"/home/michele/esp/xtensa-esp32-elf/xtensa-esp32-elf/include/c++/5.2.0/debug/string",
		"/home/michele/esp/esp-idf/components/esp32/include/esp_wifi.h",
		"/home/michele/esp/esp-idf/components/freertos/tasks.c",
		"/home/michele/esp/xtensa-esp32-elf/xtensa-esp32-elf/include/c++/5.2.0/bits/stringfwd.h",
		"/home/michele/esp/esp-idf/components/esp32/include/esp_types.h",
		"/home/michele/eclipse-workspace/PdsProject/main/80211packet.h",
		"/home/michele/eclipse-workspace/PdsProject/main/80211Packet.h"
	],
	"find":
	{
		"height": 27.0
	},
	"find_in_files":
	{
		"height": 132.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"WIFI_MODE_NULL"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "main/main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5014,
						"regions":
						{
						},
						"selection":
						[
							[
								811,
								811
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 240.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/home/michele/.config/sublime-text-3/Packages/SublimeCodeIntel/Default (Linux).sublime-mousemap",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 122,
						"regions":
						{
						},
						"selection":
						[
							[
								122,
								122
							]
						],
						"settings":
						{
							"auto_complete": true,
							"syntax": "Packages/JavaScript/JSON.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/home/michele/.config/sublime-text-3/Packages/SublimeCodeIntel/Default (Linux).sublime-keymap",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 225,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 3,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3875,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										563,
										577
									],
									[
										781,
										795
									],
									[
										1164,
										1178
									],
									[
										1566,
										1580
									],
									[
										2194,
										2208
									],
									[
										3256,
										3270
									],
									[
										3585,
										3599
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								794,
								794
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/home/michele/esp/esp-idf/components/esp32/include/esp_wifi_types.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17137,
						"regions":
						{
						},
						"selection":
						[
							[
								1009,
								1009
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 41.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 43.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 297.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.xdebug":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "esp.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"loggn",
				"tests/loggen/loggen.c"
			],
			[
				"logge",
				"tests/loggen/loggen.md"
			],
			[
				"md5.h",
				"esp-idf/components/mbedtls/include/mbedtls/md5.h"
			],
			[
				"md5",
				"esp-idf/components/mbedtls/library/md5.c"
			],
			[
				"tsyst",
				"esp/xtensa-esp32-elf/lib/gcc/xtensa-esp32-elf/5.2.0/plugin/include/tsystem.h"
			],
			[
				"esp_log",
				"esp/esp-idf/components/log/include/esp_log.h"
			],
			[
				"ccm",
				"esp/esp-idf/components/mbedtls/include/mbedtls/ccm.h"
			],
			[
				"esp_typ",
				"esp/esp-idf/components/esp32/include/esp_types.h"
			],
			[
				"esp_wifi",
				"esp/esp-idf/components/esp32/include/esp_wifi.h"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}

